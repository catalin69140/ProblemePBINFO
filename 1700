#include <iostream>
#include <algorithm>
using namespace std;

struct triplet
{
    int linie,coloana,valoare;
};

struct matrice_rara
{
    int nr_linii,nr_coloane,nr_triplete;
    triplet t[1005];
} a,b,c;

void citireMatrici()
{
    cout<<"a.nr_linii = ";
    cin>>a.nr_linii;
    cout<<"a.nr_coloane = ";
    cin>>a.nr_coloane;
    cout<<"a.nr_triplete = ";
    cin>>a.nr_triplete;

    for(unsigned i=0; i<a.nr_triplete; i++)
    {
        cin>>a.t[i].linie>>a.t[i].coloana>>a.t[i].valoare;
    }

    cin>>b.nr_linii>>b.nr_coloane>>b.nr_triplete;

    for(unsigned i=0; i<b.nr_triplete; i++)
    {
        cin>>b.t[i].linie>>b.t[i].coloana>>b.t[i].valoare;
    }
}

int maiMicLexicografic(triplet t1,triplet t2)
{
    if (t1.linie < t2.linie)
    {
        return 1;
    }
    if (t1.linie == t2.linie && t1.coloana < t2.coloana)
    {
        return 1;
    }
    return 0;
}

/*
bool maiMicLexicografic(triplet t1, triplet t2)
{
    return (t1.linie<t2.linie || (t1.linie==t2.linie && t1.coloana<t2.coloana));
}
*/
///--

void inmultire(matrice_rara a,matrice_rara b,matrice_rara &c)
{
    c.nr_linii=a.nr_linii;
    c.nr_coloane=b.nr_coloane;
    c.nr_triplete=0;

    unsigned ordinTriplet_a=0,ordinTriplet_b=0;

    while(ordinTriplet_a<a.nr_triplete && ordinTriplet_b<b.nr_triplete)
    {
        // tripletul actual din a este mai mic decat tripletul actual din b
        if(maiMicLexicografic(a.t[ordinTriplet_a], b.t[ordinTriplet_b]))
        {
            // il inserez in c si trec mai departe cu tripletul a
            c.t[c.nr_triplete]=a.t[ordinTriplet_a++];
        }
        else
        {
            // la fel ca if-ul de mai sus, doar ca pentru b
            if(maiMicLexicografic(b.t[ordinTriplet_b],a.t[ordinTriplet_a]))
            {
                c.t[c.nr_triplete]=b.t[ordinTriplet_b++];
            }
            else   // tripletele sunt egale
            {

                if(b.t[ordinTriplet_b].valoare+a.t[ordinTriplet_a].valoare!=0)   // verific sa nu fie nenula valoarea care vreau sa o inserez
                {

                    c.t[c.nr_triplete].linie=a.t[ordinTriplet_a].linie;
                    c.t[c.nr_triplete].coloana=a.t[ordinTriplet_a].coloana;
                    c.t[c.nr_triplete].valoare=b.t[ordinTriplet_b].valoare+a.t[ordinTriplet_a].valoare;

                    ordinTriplet_a++; // mergem mai departe cu tripletele a si b
                    ordinTriplet_b++;
                }
            }
        }
        c.nr_triplete++;
    }

    // copiez tripletele ramase in a si b
    while(ordinTriplet_a < a.nr_triplete)
    {
        c.t[c.nr_triplete++]=a.t[ordinTriplet_a++];
    }

    while(ordinTriplet_b<b.nr_triplete)
    {
        c.t[c.nr_triplete++]=b.t[ordinTriplet_b++];
    }

    // sortez tripletele din c pentru a fi in ordine lexicografica
    sort(c.t,c.t+c.nr_triplete,maiMicLexicografic);
}
///--
void afisareMatriceRara()
{
    cout<<"c.nr_linii = "<<c.nr_linii<<"; "<<"c.nr_coloane = "<<c.nr_coloane<<"; "<<"c.nr_triplete = "<<c.nr_triplete<<";";
    cout<<"c.t = ";
    for(unsigned i=0; i<c.nr_triplete; i++)
    {
        if(i==0)
        {
            cout<<"{";

        }
        cout<<"{"<<c.t[i].linie<<", "<<c.t[i].coloana<<", "<<c.t[i].valoare<<"}";
        if(i<c.nr_triplete-1)
        {
            cout<<",";
        }
        if(i==c.nr_triplete-1)
        {
            cout<<"};";
            i=c.nr_triplete;
        }
        cout<<'\n';
        cout<<"       ";
    }
}

int main()
{
    citireMatrici();
    inmultire(a,b,c);
    afisareMatriceRara();
    return 0;
}
